# -*- coding: utf-8 -*-
"""Restaurant Name LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fp2BYJS5cX_VzIFVOMtUlGO1ER0_igrj
"""

!pip install langchain-huggingface
!pip install huggingface_hub
!pip install transformers
!pip install accelerate
!pip install  bitsandbytes
!pip install langchain

from google.colab import userdata
sec_key=userdata.get("HF_TOKEN")
print(sec_key)

from langchain_huggingface import HuggingFaceEndpoint

from google.colab import userdata
sec_key=userdata.get("HUGGINGFACEHUB")
print(sec_key)

import os
os.environ["HUGGINGFACEHUB_API_TOKEN"]=sec_key

repo_id="mistralai/Mistral-7B-Instruct-v0.3"
llm=HuggingFaceEndpoint(repo_id=repo_id,max_length=128,temperature=0.7,token=sec_key)

llm.invoke(" I want to open a restaurant for Indian food. Suggest a name for it ")

from langchain.prompts import PromptTemplate

prompt_template_name = PromptTemplate(
    input_variables = ['cuisine'],
    template = "I want to open a restaurant for {cuisine} food. Suggest a name for it "
)
prompt_template_name.format(cuisine = "Italian")

#SimpleSequentialChain
from langchain.prompts import PromptTemplate

prompt_template_name = PromptTemplate(
    input_variables = ['cuisine'],
    template = "I want to open a restaurant for {cuisine} food. Suggest a name for it "
)

name_chain = LLMChain(llm = llm, prompt = prompt_template_name)

prompt_template_items = PromptTemplate(
    input_variables = ['restaurant_name'],
    template = "Some menu items for {restaurant_name} "
)

food_items_chain = LLMChain(llm = llm, prompt = prompt_template_items)

from langchain.chains import SimpleSequentialChain

chain = SimpleSequentialChain(chains = [name_chain, food_items_chain])

chain.run("Italian")

prompt_template_name = PromptTemplate(
    input_variables = ['cuisine'],
    template = "I want to open a restaurant for {cuisine} food. Suggest a name for it "
)

name_chain = LLMChain(llm = llm, prompt = prompt_template_name, output_key = "restaurant_name")

prompt_template_items = PromptTemplate(
    input_variables = ['restaurant_name'],
    template = "Some menu items for {restaurant_name} "
)

food_items_chain = LLMChain(llm = llm, prompt = prompt_template_items, output_key = "menu_items")

from langchain.chains import SequentialChain

chain = SequentialChain(
    chains = [name_chain, food_items_chain],
    input_variables = ['cuisine'],
    output_variables = ['restaurant_name', 'menu_items']
)

chain({'cuisine' : 'Italian'})

!pip install gradio

import gradio as gr

def generate_restaurant_name_and_menu(cuisine):
    result = chain({'cuisine': cuisine})
    restaurant_name = result['restaurant_name']
    menu_items = result['menu_items']
    return restaurant_name, menu_items

# Create the Gradio interface
interface = gr.Interface(
    fn=generate_restaurant_name_and_menu,
    inputs=gr.Textbox(label="Cuisine"),
    outputs=[
        gr.Textbox(label="Restaurant Name"),
        gr.Textbox(label="Menu Items")
    ]
    , title="Restaurant Name Generator"
)

# Launch the Gradio app
interface.launch()

#Agents
from langchain.agents import AgentType, initialize_agent, load_tools
from langchain.llms import OpenAI

load_tools(["wikipedia" , "llm-math"], llm = llm)

agent = initialize_agent(
    tools,
    llm,
    agent = AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose = True
)

agent.run("  ")

from langchain.memory import ConversationBufferWindowMemory

memory = ConversationBufferWindowMemory(k = 1)

 convo = ConversationChain(
     llm = OpenAI(temperature = 0),
     memory = memory,
     verbose = True
 )

 convo.run("I want to open a restaurant for Indian food. Suggest a name for it ")



from langchain.document_loaders.csv_loader import CSVLoader

loader = CSVLoader(file_path = 'state_of_the_union.csv')
data = loader.load()

from langchain.document_loaders import UnstructuredURLLoader

loader = UnstructuredURLLoader(urls = [
    "https://www.understandingwar.org/backgrounder/russian-offensive-campaign-assessment-report"
])

data = loader.load()

text = " "

from langchain.text_splitter import CharacterTextSplitter

text_splitter = CharacterTextSplitter(
    separator = "\n",
    chunk_size = 200,
    chunk_overlap = 100,
    length_function = len
)

docs = text_splitter.split_text(text)